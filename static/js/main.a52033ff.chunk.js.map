{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TodoList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleName","event","setState","temp","target","value","console","log","handleEdit","edtemp","setEdit","idx","temp2","state","todos","map","index","setName","preventDefault","user","handleChange","current","addItem","concat","toConsumableArray","imDone","splice","cancelEdit","editRequest","temp1","react_default","a","createElement","id","name","type","placeholder","onChange","onClick","_this2","theList","key","className","length","htmlFor","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAmIeA,qBA/Hb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAUFI,WAAa,SAAAC,GACXR,EAAKS,SAAS,CACZC,KAAMF,EAAMG,OAAOC,QAErBC,QAAQC,IAAIN,EAAMG,OAAOC,QAfbZ,EAkBde,WAAa,SAAAP,GACXR,EAAKS,SAAS,CACZO,OAAQR,EAAMG,OAAOC,QAEvBC,QAAQC,IAAIN,EAAMG,OAAOC,QAtBbZ,EAyBdiB,QAAU,SAACC,GACT,IAAIC,EAAQnB,EAAKoB,MAAMC,MAAMC,IAAI,SAACD,EAAOE,GACvC,OAAIL,IAAQK,EACFvB,EAAKoB,MAAMJ,OAGZK,IAGXrB,EAAKS,SAAS,CAAEY,MAAOF,KAlCXnB,EAqCdwB,QAAU,SAAAhB,GACRA,EAAMiB,iBACkB,KAApBzB,EAAKoB,MAAMV,KACbV,EAAKS,SAAS,CACZiB,KAAM1B,EAAKoB,MAAMV,KAAO,KACxBA,KAAM,KAIRV,EAAKS,SAAS,CACZiB,KAAM,OACNhB,KAAM,MAhDEV,EAqDd2B,aAAe,SAAAnB,GACbR,EAAKS,SAAS,CACZmB,QAASpB,EAAMG,OAAOC,QAExBC,QAAQC,IAAIN,EAAMG,OAAOC,QAzDbZ,EA4Dd6B,QAAU,SAAArB,GACRA,EAAMiB,iBACNzB,EAAKS,SAAS,CACZY,MAAK,GAAAS,OAAA7B,OAAA8B,EAAA,EAAA9B,CAAMD,EAAKoB,MAAMC,OAAjB,CAAwBrB,EAAKoB,MAAMQ,UACxCA,QAAS,KAEXf,QAAQC,IAAI,qBAAsBd,EAAKoB,MAAMQ,QAAS,iBAlE1C5B,EAqEdgC,OAAS,SAACT,GACR,IAAIb,EAAIT,OAAA8B,EAAA,EAAA9B,CAAOD,EAAKoB,MAAMC,OAC1BX,EAAKuB,OAAOV,EAAO,GACnBvB,EAAKS,SAAS,CAAEY,MAAOX,KAxEXV,EA2EdkC,WAAa,SAAAxB,GACXV,EAAKS,SAAS,CAAEY,MAAOX,EAAMM,OAAQ,MA5EzBhB,EA+EdmC,YAAc,SAACZ,GACb,IAAIa,EAAQpC,EAAKoB,MAAMC,MAAMC,IAAI,SAACD,EAAOH,GACvC,IAAIR,EAAOV,EAAKoB,MAAMC,MAAMC,IAAI,SAACD,GAAY,OAAOA,IACpD,OAAIH,IAAQK,EAGRc,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOC,GAAG,UAAUC,KAAK,SAASC,KAAK,OAAOC,YAAatB,EAAOuB,SAAU5C,EAAKe,aACjFsB,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASG,QAAS,WAAQ7C,EAAKiB,QAAQC,KAApD,QACAmB,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASG,QAAS,WAAQ7C,EAAKkC,WAAWxB,KAAvD,WAIGW,IAGXrB,EAAKS,SAAS,CAAEY,MAAOe,KA7FvBpC,EAAKoB,MAAQ,CACXC,MAAO,GACPO,QAAS,GACTlB,KAAM,GACNgB,KAAM,OACNV,OAAQ,IAPEhB,wEAkGL,IAAA8C,EAAA3C,KACD4C,EAAU5C,KAAKiB,MAAMC,MAAMC,IAAI,SAACD,EAAOE,GAAR,OAAkBc,EAAAC,EAAAC,cAAA,QAAMS,IAAKzB,EAAO0B,UAAU,YAAWZ,EAAAC,EAAAC,cAAA,UAAQU,UAAU,cAAcJ,QAAS,WAAQC,EAAKd,OAAOT,KAAUc,EAAAC,EAAAC,cAAA,oBAAsBF,EAAAC,EAAAC,cAAA,QAAMU,UAAU,YAAWZ,EAAAC,EAAAC,cAAA,SAAIhB,EAAM,EAAV,MAAmBF,GAAagB,EAAAC,EAAAC,cAAA,UAAQU,UAAU,cAAcJ,QAAS,WAAQC,EAAKX,YAAYZ,KAAUc,EAAAC,EAAAC,cAAA,qBAElU,OADA1B,QAAQC,IAAIiC,GAEVV,EAAAC,EAAAC,cAAA,OAAKU,UAAU,kBACbZ,EAAAC,EAAAC,cAAA,OAAKU,UAAU,UACbZ,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YAAWH,EAAAC,EAAAC,cAAA,uBACnBF,EAAAC,EAAAC,cAAA,SAAOC,GAAG,eAAeI,SAAUzC,KAAKI,WAAYkC,KAAK,WAAWC,KAAK,OAAOC,YAAY,uBAAuB/B,MAAOT,KAAKiB,MAAMV,OACrI2B,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASF,GAAG,mBAAmBK,QAAS1C,KAAKqB,SAA1D,UAEFa,EAAAC,EAAAC,cAAA,OAAKU,UAAU,aACbZ,EAAAC,EAAAC,cAAA,OAAKU,UAAU,cACbZ,EAAAC,EAAAC,cAAA,MAAIC,GAAG,WAAUH,EAAAC,EAAAC,cAAA,SAAIpC,KAAKiB,MAAMM,KAAf,gBACjBW,EAAAC,EAAAC,cAAA,KAAGC,GAAG,aAAYH,EAAAC,EAAAC,cAAA,SAAIpC,KAAKiB,MAAMC,MAAM6B,OAArB,0BAClBb,EAAAC,EAAAC,cAAA,QAAMC,GAAG,eACPH,EAAAC,EAAAC,cAAA,SAAOY,QAAQ,YAAf,aACAd,EAAAC,EAAAC,cAAA,SAAOK,SAAUzC,KAAKwB,aAAca,GAAG,eAAeC,KAAK,WAAWC,KAAK,OAAOC,YAAY,wCAAwC/B,MAAOT,KAAKiB,MAAMQ,UACxJS,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASF,GAAG,YAAWK,QAAS1C,KAAK0B,SAAlD,iBAGJQ,EAAAC,EAAAC,cAAA,OAAKU,UAAU,WACZF,YAxHUK,cCSHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a52033ff.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport \"./App.css\";\n\nclass TodoList extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: [],\n      current: \"\",\n      temp: \"\",\n      user: \"Your\",\n      edtemp: \"\"\n    };\n  }\n\n  handleName = event => {\n    this.setState({\n      temp: event.target.value\n    })\n    console.log(event.target.value)\n  };\n\n  handleEdit = event => {\n    this.setState({\n      edtemp: event.target.value\n    })\n    console.log(event.target.value)\n  };\n\n  setEdit = (idx) => {\n    var temp2 = this.state.todos.map((todos, index) => {\n      if (idx === index) {\n        return (this.state.edtemp)\n      }\n      else {\n        return todos\n      }\n    });\n    this.setState({ todos: temp2 })\n  }\n\n  setName = event => {\n    event.preventDefault();\n    if (this.state.temp !== \"\") {\n      this.setState({\n        user: this.state.temp + '\\'s',\n        temp: \"\"\n      })\n    }\n    else {\n      this.setState({\n        user: 'Your',\n        temp: \"\",\n      })\n    }\n  };\n\n  handleChange = event => {\n    this.setState({\n      current: event.target.value\n    })\n    console.log(event.target.value)\n  };\n\n  addItem = event => {\n    event.preventDefault();\n    this.setState({\n      todos: [...this.state.todos, this.state.current],\n      current: ''\n    })\n    console.log(\"Successfully added\", this.state.current, \"to the list!\")\n  }\n\n  imDone = (index) => {\n    var temp = [...this.state.todos]\n    temp.splice(index, 1)\n    this.setState({ todos: temp })\n  }\n\n  cancelEdit = temp => {\n    this.setState({ todos: temp, edtemp: \"\" })\n  }\n\n  editRequest = (index) => {\n    var temp1 = this.state.todos.map((todos, idx) => {\n      var temp = this.state.todos.map((todos) => { return todos })\n      if (idx === index) {\n\n        return (\n          <div>\n            <input id=\"editbox\" name=\"editme\" type=\"text\" placeholder={todos} onChange={this.handleEdit}></input>\n            <button type=\"button\" onClick={() => { this.setEdit(idx) }}>Save</button>\n            <button type=\"button\" onClick={() => { this.cancelEdit(temp) }}>Cancel</button>\n          </div>)\n      }\n      else {\n        return todos\n      }\n    });\n    this.setState({ todos: temp1 })\n  }\n\n  render() {\n    const theList = this.state.todos.map((todos, index) => <span key={index} className=\"listItem\"><button className=\"listButtons\" onClick={() => { this.imDone(index) }}><b>Delete</b></button><span className=\"taskText\"><b>{index+1}: </b>{todos}</span><button className=\"listButtons\" onClick={() => { this.editRequest(index) }}><b>Edit</b></button></span>);\n    console.log(theList)\n    return (\n      <div className='supercontainer'>\n        <div className=\"navBar\">\n          <div id=\"nameText\"><b>Set Name:</b></div>\n          <input id=\"nameInputBox\" onChange={this.handleName} name=\"userName\" type=\"text\" placeholder=\"Enter your name here\" value={this.state.temp}></input>\n          <button type=\"submit\" id=\"changeNameButton\" onClick={this.setName}>Enter</button>\n        </div>\n        <div className=\"container\">\n          <div className=\"titleblock\">\n            <h1 id=\"nametag\"><u>{this.state.user} To-Do List</u></h1>\n            <p id=\"tasksleft\"><b>{this.state.todos.length} thing(s) left to do.</b></p>\n            <form id=\"addtaskform\">\n              <label htmlFor=\"taskName\">New Task:</label>\n              <input onChange={this.handleChange} id=\"taskInputBox\" name=\"taskName\" type=\"text\" placeholder=\"Type your task here then press enter.\" value={this.state.current}></input>\n              <button type=\"submit\" id=\"addToList\"onClick={this.addItem}>Add to list</button>\n            </form>\n          </div>\n          <div className=\"theList\">\n            {theList}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TodoList;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}